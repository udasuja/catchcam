# -*- coding: utf-8 -*-
"""yolov5_nef_transfer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z6JPzGURpTgIc0m71m68hrwVYXyiiVfq
"""

#!/usr/bin/env python3
# yolov5_quantize_nef.py

import os
import argparse
import onnx
import numpy as np
from PIL import Image
from ktc import ModelConfig, compile as ktc_compile

def load_calib_images(calib_dir: str, size: int):
    """
    calib_dir에 있는 이미지를 size×size로 리사이즈한 뒤,
    (1,3,H,W) 형태로 변환해 리스트로 반환합니다.
    """
    img_list = []
    for root, _, files in os.walk(calib_dir):
        for fn in files:
            path = os.path.join(root, fn)
            try:
                img = Image.open(path).convert("RGB").resize((size, size), Image.BILINEAR)
                arr = np.array(img, dtype=np.float32) / 255.0  # [0,1] 정규화
                # YOLOv5 전처리: (H,W,3) → (3,H,W)
                arr = np.transpose(arr, (2, 0, 1))
                img_list.append(np.expand_dims(arr, 0))  # (1,3,H,W)
            except Exception as e:
                print(f"⚠️ Skipped {path}: {e}")
    return img_list

def main():
    p = argparse.ArgumentParser(description="YOLOv5 ONNX → BIE → NEF 변환 스크립트")
    p.add_argument("--onnx",      required=True,  help="최적화된 YOLOv5 ONNX 모델 경로")
    p.add_argument("--calib",     required=True,  help="양자화용 이미지 폴더 경로")
    p.add_argument("--size",      type=int, default=640, help="입력 해상도 (기본: 640)")
    p.add_argument("--model_id",  type=int, default=50505, help="Kneron 모델 ID")
    p.add_argument("--version",   default="001", help="모델 버전")
    p.add_argument("--platform",  default="630", help="NPU 플랫폼")
    p.add_argument("--output",    required=True, help="출력 디렉터리")
    p.add_argument("--input_name",default="images", help="ONNX 입력 노드 이름")
    args = p.parse_args()

    os.makedirs(args.output, exist_ok=True)

    # 1) ONNX 로드
    print(f">>> Load ONNX model from {args.onnx}")
    onnx_model = onnx.load(args.onnx)

    # 2) ModelConfig 생성
    print(f">>> Create ModelConfig(id={args.model_id}, version={args.version}, platform={args.platform})")
    km = ModelConfig(
        id=args.model_id,
        version=args.version,
        platform=args.platform,
        onnx_model=onnx_model
    )

    # 3) 캘리브레이션 이미지 준비
    print(f">>> Load and preprocess calibration images from {args.calib}")
    img_list = load_calib_images(args.calib, args.size)
    print(f"✅ 총 {len(img_list)}개 이미지 준비됨")

    if not img_list:
        raise RuntimeError("❌ 양자화용 이미지가 없습니다. --calib 폴더를 확인하세요.")

    # 4) 양자화 수행
    print(">>> Run fixed-point analysis to generate BIE (.bie)")
    bie_path = km.analysis({ args.input_name: img_list })
    print(f"✅ BIE 생성 완료: {bie_path}")

    # 5) NEF 컴파일
    print(">>> Compile to NEF")
    nef_paths = ktc_compile([km], output_dir=args.output)
    print("✅ NEF 생성 완료:")
    for path in nef_paths:
        print("   -", path)

if __name__ == "__main__":
    main()